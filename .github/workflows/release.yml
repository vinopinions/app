name: Release
on:
  push:
    branches: ['developer', 'master']

permissions:
  contents: read # for checkout

env:
  SEMANTIC_RELEASE_VERSION: 23

jobs:
  codeql:
    uses: ./.github/workflows/codeql.yml
    permissions:
      actions: read
      security-events: write
      contents: read

  eslint:
    uses: ./.github/workflows/eslint.yml
    permissions:
      security-events: write
      contents: read

  release:
    name: Release Github
    runs-on: ubuntu-latest

    needs:
      - codeql
      - eslint

    outputs:
      version: ${{ steps.check_version.outputs.RELEASE_VERSION }}
      releaseCommitSha: ${{ steps.get_release_commit_sha.outputs.RELEASE_COMMIT_SHA }}

    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ vars.RELEASE_BOT_ID }}
          private_key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.generate_token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Install dependencies
        run: yarn install --immutable

      - name: Check version
        id: check_version
        run: echo "RELEASE_VERSION=$(npx semantic-release --dry-run | grep 'The next release version is' | awk '{print $NF}')" >> $GITHUB_OUTPUT

      - name: Release version
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: npx semantic-release

      # store the commit hash of the release commit for later workflows to verify the correct version
      - name: Get Release Commit Sha
        id: get_release_commit_sha
        run: echo "RELEASE_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  publish_expo:
    name: Publish Expo
    runs-on: ubuntu-latest

    needs:
      - release

    outputs:
      iosBuildId: ${{ steps.build.outputs.IOS_BUILD_ID }}
      androidUrl: ${{ steps.build.outputs.ANDROID_URL }}

    # check if a new version should be released
    if: needs.release.outputs.version != ''

    environment:
      name: ${{ contains(github.ref_name, 'master') && 'production' || 'dev' }}

    env:
      DOCKER_REGISTRY: ghcr.io

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # use the commit hash of the release commit to verify the correct version
          ref: ${{ needs.release.outputs.releaseCommitSha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: yarn install --ignore-scripts

      - name: Build on EAS
        id: build
        run: |
          eas build --profile ${{ vars.EAS_BUILD_PROFILE }} --platform all --json --non-interactive --wait > output.json
          echo "ANDROID_URL=$(cat output.json | jq '.[] | select(.platform == "ANDROID") | .artifacts.buildUrl')" >> "$GITHUB_OUTPUT"
          echo "IOS_BUILD_ID=$(cat output.json | jq '.[] | select(.platform == "IOS") | .id')" >> "$GITHUB_OUTPUT"

  discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs:
      - release
      - publish_expo

    environment:
      name: ${{ contains(github.ref_name, 'master') && 'production' || 'dev' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # use the commit hash of the release commit to verify the correct version
          ref: ${{ needs.release.outputs.releaseCommitSha }}

      - name: Set environment variables
        run: |
          echo "CHANGELOG_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/tag/v${{ needs.release.outputs.version }}" >> $GITHUB_ENV
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "REPOSITORY_URL=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${{ needs.release.outputs.version }}" >> $GITHUB_ENV
          echo "IOS_URL=https://github.com" >> $GITHUB_ENV
          echo "IOS_URL=https://expo.dev///accounts/vinopinions/projects/vinopinions/builds/${{ needs.publish_expo.outputs.iosUrl }}" >> $GITHUB_ENV
          echo "ANDROID_URL=${{ needs.publish_expo.outputs.androidUrl }}" >> $GITHUB_ENV

      - name: Update template
        run: envsubst < .github/templates/discord-embed-payload.json > discord-embed-payload.json

      - name: Send webhook
        run: |
          curl --location ${{ secrets.DISCORD_WEBHOOK }} \
          --header 'Content-Type: application/json' \
          --data @discord-embed-payload.json
